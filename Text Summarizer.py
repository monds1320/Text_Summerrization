# -*- coding: utf-8 -*-
""".ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CBAmGzaH5XzMPr4Zo-PV7khOs2CLdm42

# ** Code of Text Summarization using python**

** By : TANMAY MONDAL**
"""

# importing libraries

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize, sent_tokenize

# Input text - to summarize

text=""" Text Summarization methods can be classified into extractive and abstractive summarization. 
 An extractive summarization method consists of selecting important sentences, paragraphs etc.
 from the original document and concatenating them into shorter form. The importance of sentences is 
 decided based on statistical and linguistic features of sentences. An abstractive summarization method
 consists of understanding the original text and re-telling it in fewer words. It uses linguistic methods
 to examine and interpret the text and then to find the new concepts and expressions to best describe it
 by generating a new shorter text that conveys the most important information from the original text document"""

# Tokenizing the text

import nltk
nltk.download('stopwords')
nltk.download('punkt')

stopWords = set(stopwords.words("english"))
words = word_tokenize(text)

# Creating a frequency table to keep the 
# score of each word

freqTable = dict()
for word in words:
    word = word.lower()
    if word in stopWords:
        continue
    if word in freqTable:
        freqTable[word] += 1
    else:
        freqTable[word] = 1

# Creating a dictionary to keep the score
# of each sentence

sentences = sent_tokenize(text)
sentenceValue = dict()

for sentence in sentences:
    for word, freq in freqTable.items():
        if word in sentence.lower():
            if sentence in sentenceValue:
                sentenceValue[sentence] += freq
            else:
                sentenceValue[sentence] = freq

sumValues = 0
for sentence in sentenceValue:
    sumValues += sentenceValue[sentence]

# Average value of a sentence from the original text

average = int(sumValues / len(sentenceValue))

# Storing sentences into our summary.

summary = ''
for sentence in sentences:
    if (sentence in sentenceValue) and (sentenceValue[sentence] > (1.2 * average)):
        summary += " " + sentence
print(summary)